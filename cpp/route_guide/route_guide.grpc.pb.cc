// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: route_guide.proto

#include "route_guide.pb.h"
#include "route_guide.grpc.pb.h"

#include <grpc++/async_unary_call.h>
#include <grpc++/channel_interface.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/stream.h>
namespace examples {

static const char* RouteGuide_method_names[] = {
  "/examples.RouteGuide/GetFeature",
  "/examples.RouteGuide/ListFeatures",
  "/examples.RouteGuide/RecordRoute",
  "/examples.RouteGuide/RouteChat",
};

std::unique_ptr< RouteGuide::Stub> RouteGuide::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel) {
  std::unique_ptr< RouteGuide::Stub> stub(new RouteGuide::Stub(channel));
  return stub;
}

RouteGuide::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : ::grpc::InternalStub(channel), rpcmethod_GetFeature_(RouteGuide_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel->RegisterMethod(RouteGuide_method_names[0]))
  , rpcmethod_ListFeatures_(RouteGuide_method_names[1], ::grpc::RpcMethod::SERVER_STREAMING, channel->RegisterMethod(RouteGuide_method_names[1]))
  , rpcmethod_RecordRoute_(RouteGuide_method_names[2], ::grpc::RpcMethod::CLIENT_STREAMING, channel->RegisterMethod(RouteGuide_method_names[2]))
  , rpcmethod_RouteChat_(RouteGuide_method_names[3], ::grpc::RpcMethod::BIDI_STREAMING, channel->RegisterMethod(RouteGuide_method_names[3]))
  {}

::grpc::Status RouteGuide::Stub::GetFeature(::grpc::ClientContext* context, const ::examples::Point& request, ::examples::Feature* response) {
  return ::grpc::BlockingUnaryCall(channel(), rpcmethod_GetFeature_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::examples::Feature>* RouteGuide::Stub::AsyncGetFeatureRaw(::grpc::ClientContext* context, const ::examples::Point& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::examples::Feature>(channel(), cq, rpcmethod_GetFeature_, context, request);
}

::grpc::ClientReader< ::examples::Feature>* RouteGuide::Stub::ListFeaturesRaw(::grpc::ClientContext* context, const ::examples::Rectangle& request) {
  return new ::grpc::ClientReader< ::examples::Feature>(channel(), rpcmethod_ListFeatures_, context, request);
}

::grpc::ClientAsyncReader< ::examples::Feature>* RouteGuide::Stub::AsyncListFeaturesRaw(::grpc::ClientContext* context, const ::examples::Rectangle& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::examples::Feature>(channel(), cq, rpcmethod_ListFeatures_, context, request, tag);
}

::grpc::ClientWriter< ::examples::Point>* RouteGuide::Stub::RecordRouteRaw(::grpc::ClientContext* context, ::examples::RouteSummary* response) {
  return new ::grpc::ClientWriter< ::examples::Point>(channel(), rpcmethod_RecordRoute_, context, response);
}

::grpc::ClientAsyncWriter< ::examples::Point>* RouteGuide::Stub::AsyncRecordRouteRaw(::grpc::ClientContext* context, ::examples::RouteSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncWriter< ::examples::Point>(channel(), cq, rpcmethod_RecordRoute_, context, response, tag);
}

::grpc::ClientReaderWriter< ::examples::RouteNote, ::examples::RouteNote>* RouteGuide::Stub::RouteChatRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::examples::RouteNote, ::examples::RouteNote>(channel(), rpcmethod_RouteChat_, context);
}

::grpc::ClientAsyncReaderWriter< ::examples::RouteNote, ::examples::RouteNote>* RouteGuide::Stub::AsyncRouteChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReaderWriter< ::examples::RouteNote, ::examples::RouteNote>(channel(), cq, rpcmethod_RouteChat_, context, tag);
}

RouteGuide::AsyncService::AsyncService() : ::grpc::AsynchronousService(RouteGuide_method_names, 4) {}

RouteGuide::Service::~Service() {
  delete service_;
}

::grpc::Status RouteGuide::Service::GetFeature(::grpc::ServerContext* context, const ::examples::Point* request, ::examples::Feature* response) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void RouteGuide::AsyncService::RequestGetFeature(::grpc::ServerContext* context, ::examples::Point* request, ::grpc::ServerAsyncResponseWriter< ::examples::Feature>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status RouteGuide::Service::ListFeatures(::grpc::ServerContext* context, const ::examples::Rectangle* request, ::grpc::ServerWriter< ::examples::Feature>* writer) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void RouteGuide::AsyncService::RequestListFeatures(::grpc::ServerContext* context, ::examples::Rectangle* request, ::grpc::ServerAsyncWriter< ::examples::Feature>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::Status RouteGuide::Service::RecordRoute(::grpc::ServerContext* context, ::grpc::ServerReader< ::examples::Point>* reader, ::examples::RouteSummary* response) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void RouteGuide::AsyncService::RequestRecordRoute(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::examples::RouteSummary, ::examples::Point>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
}

::grpc::Status RouteGuide::Service::RouteChat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::examples::RouteNote, ::examples::RouteNote>* stream) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void RouteGuide::AsyncService::RequestRouteChat(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::examples::RouteNote, ::examples::RouteNote>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* RouteGuide::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      RouteGuide_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< RouteGuide::Service, ::examples::Point, ::examples::Feature>(
          std::mem_fn(&RouteGuide::Service::GetFeature), this),
      new ::examples::Point, new ::examples::Feature));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      RouteGuide_method_names[1],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< RouteGuide::Service, ::examples::Rectangle, ::examples::Feature>(
          std::mem_fn(&RouteGuide::Service::ListFeatures), this),
      new ::examples::Rectangle, new ::examples::Feature));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      RouteGuide_method_names[2],
      ::grpc::RpcMethod::CLIENT_STREAMING,
      new ::grpc::ClientStreamingHandler< RouteGuide::Service, ::examples::Point, ::examples::RouteSummary>(
          std::mem_fn(&RouteGuide::Service::RecordRoute), this),
      new ::examples::Point, new ::examples::RouteSummary));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      RouteGuide_method_names[3],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< RouteGuide::Service, ::examples::RouteNote, ::examples::RouteNote>(
          std::mem_fn(&RouteGuide::Service::RouteChat), this),
      new ::examples::RouteNote, new ::examples::RouteNote));
  return service_;
}


}  // namespace examples

